{"version":3,"sources":["api/api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["url","getAllTodos","a","fetch","response","json","getUserById","id","TodoList","state","query","filterBy","handleSearch","event","setState","target","value","toLowerCase","handleSelectorInput","getFilteredTodos","props","todos","filter","todo","title","includes","this","selectUser","visibleTodos","completed","className","type","placeholder","onChange","map","classNames","checked","readOnly","onClick","userId","React","Component","CurrentUser","user","loadUser","prevProps","clearUser","name","email","phone","App","selectedUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eeb16704.chunk.js","sourcesContent":["const url = 'https://mate.academy/students-api';\n\nexport async function getAllTodos(): Promise<Todo[]> {\n  const response = await fetch(`${url}/todos`);\n\n  return response.json();\n}\n\nexport async function getUserById(id: number): Promise<User> {\n  const response = await fetch(`${url}/users/${id}`);\n\n  return response.json();\n}\n","import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  todos: Todo[],\n  selectUser: (id: number) => void;\n};\n\ntype State = {\n  query: string;\n  filterBy: string;\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state = {\n    query: '',\n    filterBy: 'all',\n  };\n\n  handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      query: event.target.value.toLowerCase(),\n    });\n  };\n\n  handleSelectorInput = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({\n      filterBy: event.target.value,\n    });\n  };\n\n  getFilteredTodos = () => (\n    this.props.todos.filter(todo => todo.title.toLowerCase().includes(this.state.query))\n  );\n\n  render() {\n    const { query, filterBy } = this.state;\n    const { selectUser } = this.props;\n\n    let visibleTodos = this.getFilteredTodos();\n\n    visibleTodos = visibleTodos.filter(todo => {\n      switch (filterBy) {\n        case 'all':\n          return todo;\n        case 'active':\n          return !todo.completed;\n        case 'completed':\n          return todo.completed;\n        default:\n          return 0;\n      }\n    });\n\n    return (\n      <div className=\"TodoList\">\n        <h2 className=\"subtitle pb-2\">Todos:</h2>\n        <div className=\"control pb-2\">\n          <input\n            type=\"text\"\n            id=\"search-query\"\n            className=\"input\"\n            placeholder=\"Search by title\"\n            value={query}\n            onChange={this.handleSearch}\n          />\n        </div>\n\n        <div className=\"select is-info\">\n          <select\n            value={filterBy}\n            onChange={this.handleSelectorInput}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </div>\n\n        <div className=\"TodoList__list-container pt-2\">\n          <ul className=\"TodoList__list\">\n            {visibleTodos.map((todo) => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--unchecked': !todo.completed,\n                    'TodoList__item--checked': todo.completed,\n                  },\n                )}\n              >\n                <input type=\"checkbox\" checked={todo.completed} readOnly />\n                <p>{todo.title}</p>\n\n                <button\n                  className=\"\n                    TodoList__user-button\n                    button\n                  \"\n                  type=\"button\"\n                  onClick={() => selectUser(+todo.userId)}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './CurrentUser.scss';\n\nimport { getUserById } from '../../api/api';\n\ntype State = {\n  user: User | null;\n};\n\ntype Props = {\n  userId: number;\n  clearUser: () => void;\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadUser();\n    }\n  }\n\n  async loadUser() {\n    const { userId } = this.props;\n    const user = await getUserById(userId) || null;\n\n    this.setState({ user });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { clearUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser box\">\n        <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user?.id}`}</span></h2>\n\n        {user && (\n          <>\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone pb-2\">{user.phone}</p>\n          </>\n        )}\n\n        <button\n          className=\"button is-danger\"\n          type=\"button\"\n          onClick={clearUser}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport 'bulma/css/bulma.min.css';\n\nimport { getAllTodos } from './api/api';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\ntype State = {\n  todos: Todo[];\n  selectedUserId: number;\n};\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const todos = await getAllTodos();\n\n    this.setState({ todos });\n  }\n\n  selectUser = (userId: number) => {\n    if (this.state.selectedUserId !== userId) {\n      this.setState({\n        selectedUserId: userId,\n      });\n    }\n  };\n\n  clearUser = () => (\n    this.setState({ selectedUserId: 0 })\n  );\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUser={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}